(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status sat)
;===============================================================================
; Encoding of Heap sorts and operations
;-------------------------------------------------------------------------------
(define-sort Addr() Int)
(declare-datatypes ((AddrRange 0))
                   (((AddrRange (AddrRangeStart Addr) (AddrRangeSize Int)))))

(declare-datatypes ((HeapObject 0))
                   (((O_Int (getInt Int)) (O_UInt (getUInt Int)) (O_Addr (getAddr Addr)) (defObj))))
(declare-datatypes ((BatchAllocResHeap 0) (AllocResHeap 0) (Heap 0))
                   (((BatchAllocResHeap   (newBatchHeap Heap) (newAddrRange AddrRange)))
                   ((AllocResHeap   (newHeap Heap) (newAddr Addr)))
                    ((HeapCtor (HeapSize Int)
                               (HeapContents (Array Addr HeapObject))))))
(define-fun nullAddr  () Addr 0)
(define-fun validHeap     ((h Heap) (p Addr)) Bool
  (and (>= (HeapSize h) p) (> p 0)))
(define-fun emptyHeap () Heap (
  HeapCtor 0 (( as const (Array Addr HeapObject)) defObj)))
(define-fun readHeap ((h Heap) (p Addr)) HeapObject
  (ite (validHeap h p)
       (select (HeapContents h) p)
       defObj))
(define-fun writeHeap ((h Heap) (p Addr) (o HeapObject)) Heap
  (ite (validHeap h p)
       (HeapCtor (HeapSize h) (store (HeapContents h) p o))
       h))
(define-fun allocHeap   ((h Heap) (o HeapObject)) AllocResHeap
  (AllocResHeap (HeapCtor (+ 1 (HeapSize h))
                    (store (HeapContents h) (+ 1 (HeapSize h)) o))
          (+ 1 (HeapSize h))))
(define-fun Heap-eq     ((h1 Heap) (h2 Heap)) Bool
  (forall ((p Addr))
          (and (= (validHeap h1 p) (validHeap h2 p))
               (= (readHeap h1 p) (readHeap h2 p)))))
(define-fun nthAddrRange((ar AddrRange) (n Int)) Addr
  (ite (and (>= n 0) (< n (AddrRangeSize ar)))
       (+ (AddrRangeStart ar) n)
       nullAddr))
(define-fun withinHeap ((ar AddrRange ) (p Addr)) Bool
  (and (>= p (AddrRangeStart ar)) (< p (+ (AddrRangeStart ar) (AddrRangeSize ar)))))

(declare-fun batchAllocHeap     (Heap Heap HeapObject Int Int) Bool)
(declare-fun batchAllocPostHeap (Heap Heap HeapObject Int) Bool)

(assert (forall ((h1 Heap) (h2 Heap) (o HeapObject) (n1 Int) (n2 Int))
                (=> (and (> n2 0) (batchAllocHeap h1 h2 o n1 n2))
                   (batchAllocHeap h1 (newHeap (allocHeap h2 o)) o n1 (- n2 1)))))
(assert (forall ((h1 Heap) (h2 Heap) (o HeapObject) (n1 Int) (n2 Int))
                (=> (and (<= n2 0) (batchAllocHeap h1 h2 o n1 n2))
                   (batchAllocPostHeap h1 h2 o n1))))

(declare-fun batchWriteHeap     (Heap Heap Addr Addr HeapObject Int Int) Bool)
(declare-fun batchWritePostHeap (Heap Heap Addr HeapObject Int) Bool)

(assert (forall ((h1 Heap) (h2 Heap) (a1 Addr) (a2 Addr) (o HeapObject) (n1 Int) (n2 Int))
                (=> (and (> n2 0) (batchWriteHeap h1 h2 a1 a2 o n1 n2))
                   (batchWriteHeap h1 (writeHeap h2 a2 o) a1 (+ a2 1) o n1 (- n2 1)))))
(assert (forall ((h1 Heap) (h2 Heap) (a1 Addr) (a2 Addr) (o HeapObject) (n1 Int) (n2 Int))
                (=> (and (<= n2 0) (batchWriteHeap h1 h2 a1 a2 o n1 n2))
                   (batchWritePostHeap h1 h2 a1 o n1))))

;===============================================================================
(declare-fun inv_main12 (Heap Int Int Int Addr Addr Addr Addr) Bool)
(declare-fun inv_main13 (Heap Int Int Int Addr Addr Addr Addr) Bool)
(declare-fun inv_main14 (Heap Int Int Int Addr Addr Addr Addr) Bool)
(declare-fun inv_main15 (Heap Int Int Int Addr Addr Addr Addr) Bool)
(declare-fun inv_main16 (Heap Int Int Int Addr Addr Addr Addr) Bool)
(declare-fun inv_main17 (Heap Int Int Int Addr Addr Addr Addr) Bool)
(declare-fun inv_main18 (Heap Int Int Int Addr Addr Addr Addr) Bool)
(declare-fun inv_main19 (Heap Int Int Int Addr Addr Addr Addr Int) Bool)
(declare-fun inv_main2 (Heap) Bool)
(declare-fun inv_main20 (Heap Int Int Int Addr Addr Addr Addr) Bool)
(declare-fun inv_main21 (Heap Int Int Int Addr Addr Addr Addr) Bool)
(declare-fun inv_main22 (Heap Int Int Int Addr Addr Addr Addr) Bool)
(declare-fun inv_main23 (Heap Int Int Int Addr Addr Addr Addr Int) Bool)
(declare-fun inv_main24 (Heap Int Int Int Addr Addr Addr Addr Int) Bool)
(declare-fun inv_main25 (Heap Int Int Int Addr Addr Addr Addr Int) Bool)
(declare-fun inv_main26 (Heap Int Int Int Addr Addr Addr Addr Int) Bool)
(assert (inv_main2 emptyHeap))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Heap)) (or (not (and (and (inv_main12 var7 var6 var5 var4 var3 var2 var1 var0) (is-O_Int (readHeap var7 var3))) (is-O_Int (readHeap var7 var3)))) (inv_main13 (writeHeap var7 var3 (O_Int var6)) var6 var5 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Int) (var6 Int) (var7 Int) (var8 Heap)) (or (not (and (and (inv_main23 var8 var7 var6 var5 var4 var3 var2 var1 var0) (<= 0 (+ (+ (* (- 1) var0) (getInt (readHeap var8 var2))) (* (- 1) 1)))) (is-O_Int (readHeap var8 var2)))) (inv_main21 var8 var7 var6 var5 var4 var3 var2 var1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Addr) (var6 Int) (var7 Int) (var8 Int) (var9 Int) (var10 Heap) (var11 Addr) (var12 Addr) (var13 Addr) (var14 Addr) (var15 Addr) (var16 Int) (var17 Int) (var18 Int) (var19 Int) (var20 Int) (var21 Int) (var22 Int) (var23 Heap) (var24 Heap) (var25 Heap)) (or (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (inv_main2 var25) (= var5 (newAddr (allocHeap var25 (O_Int var4))))) (= var6 var1)) (= var7 var2)) (= var8 var3)) (= var10 (newHeap (allocHeap var25 (O_Int var4))))) (= var12 (newAddr (allocHeap var10 (O_Int var9))))) (= var14 var5)) (= var16 var6)) (= var18 var7)) (= var20 var8)) (= var23 (newHeap (allocHeap var10 (O_Int var9))))) (= var11 (newAddr (allocHeap var23 (O_Int var22))))) (= var13 var12)) (= var15 var14)) (= var17 var16)) (= var19 var18)) (= var21 var20)) (= var24 (newHeap (allocHeap var23 (O_Int var22)))))) (inv_main12 (newHeap (allocHeap var24 (O_Int var0))) var21 var19 var17 var15 var13 var11 (newAddr (allocHeap var24 (O_Int var0)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Heap)) (or (not (and (inv_main18 var7 var6 var5 var4 var3 var2 var1 var0) (is-O_Int (readHeap var7 var3)))) (inv_main23 var7 var6 var5 var4 var3 var2 var1 var0 (getInt (readHeap var7 var3))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Heap)) (or (not (and (and (inv_main14 var7 var6 var5 var4 var3 var2 var1 var0) (is-O_Int (readHeap var7 var1))) (is-O_Int (readHeap var7 var1)))) (inv_main15 (writeHeap var7 var1 (O_Int var4)) var6 var5 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Heap)) (or (not (and (inv_main16 var7 var6 var5 var4 var3 var2 var1 var0) (is-O_Int (readHeap var7 var3)))) (inv_main19 var7 var6 var5 var4 var3 var2 var1 var0 (getInt (readHeap var7 var3))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Int) (var6 Int) (var7 Int) (var8 Heap)) (or (not (and (and (inv_main19 var8 var7 var6 var5 var4 var3 var2 var1 var0) (<= 0 (+ (+ (* (- 1) var0) (getInt (readHeap var8 var3))) (* (- 1) 1)))) (is-O_Int (readHeap var8 var3)))) (inv_main18 var8 var7 var6 var5 var4 var3 var2 var1))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Int) (var6 Int) (var7 Int) (var8 Heap)) (or (not (and (and (inv_main24 var8 var7 var6 var5 var4 var3 var2 var1 var0) (is-O_Int (readHeap var8 var4))) (is-O_Int (readHeap var8 var4)))) (inv_main20 (writeHeap var8 var4 (O_Int (+ var0 1))) var7 var6 var5 var4 var3 var2 var1))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Int) (var6 Int) (var7 Int) (var8 Heap)) (or (not (and (and (inv_main25 var8 var7 var6 var5 var4 var3 var2 var1 var0) (is-O_Int (readHeap var8 var2))) (is-O_Int (readHeap var8 var2)))) (inv_main20 (writeHeap var8 var2 (O_Int (+ var0 1))) var7 var6 var5 var4 var3 var2 var1))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Heap)) (or (not (and (inv_main22 var7 var6 var5 var4 var3 var2 var1 var0) (is-O_Int (readHeap var7 var1)))) (inv_main25 var7 var6 var5 var4 var3 var2 var1 var0 (getInt (readHeap var7 var1))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Heap)) (or (not (and (and (inv_main13 var7 var6 var5 var4 var3 var2 var1 var0) (is-O_Int (readHeap var7 var2))) (is-O_Int (readHeap var7 var2)))) (inv_main14 (writeHeap var7 var2 (O_Int var5)) var6 var5 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Heap)) (or (not (and (inv_main21 var7 var6 var5 var4 var3 var2 var1 var0) (is-O_Int (readHeap var7 var3)))) (inv_main24 var7 var6 var5 var4 var3 var2 var1 var0 (getInt (readHeap var7 var3))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Heap)) (or (not (and (and (inv_main15 var7 var6 var5 var4 var3 var2 var1 var0) (is-O_Int (readHeap var7 var0))) (is-O_Int (readHeap var7 var0)))) (inv_main16 (writeHeap var7 var0 (O_Int 0)) var6 var5 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Int) (var6 Int) (var7 Int) (var8 Heap)) (or (not (and (and (inv_main26 var8 var7 var6 var5 var4 var3 var2 var1 var0) (is-O_Int (readHeap var8 var1))) (is-O_Int (readHeap var8 var1)))) (inv_main16 (writeHeap var8 var1 (O_Int (+ var0 1))) var7 var6 var5 var4 var3 var2 var1))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Int) (var6 Int) (var7 Int) (var8 Heap)) (or (not (and (and (inv_main19 var8 var7 var6 var5 var4 var3 var2 var1 var0) (not (<= 0 (+ (+ (* (- 1) var0) (getInt (readHeap var8 var3))) (* (- 1) 1))))) (is-O_Int (readHeap var8 var3)))) (inv_main17 var8 var7 var6 var5 var4 var3 var2 var1))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Int) (var6 Int) (var7 Int) (var8 Heap)) (or (not (and (and (inv_main23 var8 var7 var6 var5 var4 var3 var2 var1 var0) (not (<= 0 (+ (+ (* (- 1) var0) (getInt (readHeap var8 var2))) (* (- 1) 1))))) (is-O_Int (readHeap var8 var2)))) (inv_main22 var8 var7 var6 var5 var4 var3 var2 var1))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Heap)) (or (not (and (inv_main20 var7 var6 var5 var4 var3 var2 var1 var0) (is-O_Int (readHeap var7 var0)))) (inv_main26 var7 var6 var5 var4 var3 var2 var1 var0 (getInt (readHeap var7 var0))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Heap)) (not (and (inv_main12 var7 var6 var5 var4 var3 var2 var1 var0) (not (is-O_Int (readHeap var7 var3)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Heap)) (not (and (and (inv_main12 var7 var6 var5 var4 var3 var2 var1 var0) (not (is-O_Int (readHeap var7 var3)))) (is-O_Int (readHeap var7 var3))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Heap)) (not (and (inv_main13 var7 var6 var5 var4 var3 var2 var1 var0) (not (is-O_Int (readHeap var7 var2)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Heap)) (not (and (and (inv_main13 var7 var6 var5 var4 var3 var2 var1 var0) (not (is-O_Int (readHeap var7 var2)))) (is-O_Int (readHeap var7 var2))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Heap)) (not (and (inv_main14 var7 var6 var5 var4 var3 var2 var1 var0) (not (is-O_Int (readHeap var7 var1)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Heap)) (not (and (and (inv_main14 var7 var6 var5 var4 var3 var2 var1 var0) (not (is-O_Int (readHeap var7 var1)))) (is-O_Int (readHeap var7 var1))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Heap)) (not (and (inv_main15 var7 var6 var5 var4 var3 var2 var1 var0) (not (is-O_Int (readHeap var7 var0)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Heap)) (not (and (and (inv_main15 var7 var6 var5 var4 var3 var2 var1 var0) (not (is-O_Int (readHeap var7 var0)))) (is-O_Int (readHeap var7 var0))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Heap)) (not (and (inv_main16 var7 var6 var5 var4 var3 var2 var1 var0) (not (is-O_Int (readHeap var7 var3)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Int) (var6 Int) (var7 Int) (var8 Heap)) (not (and (inv_main19 var8 var7 var6 var5 var4 var3 var2 var1 var0) (not (is-O_Int (readHeap var8 var3)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Heap)) (not (and (inv_main18 var7 var6 var5 var4 var3 var2 var1 var0) (not (is-O_Int (readHeap var7 var3)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Int) (var6 Int) (var7 Int) (var8 Heap)) (not (and (inv_main23 var8 var7 var6 var5 var4 var3 var2 var1 var0) (not (is-O_Int (readHeap var8 var2)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Heap)) (not (and (inv_main21 var7 var6 var5 var4 var3 var2 var1 var0) (not (is-O_Int (readHeap var7 var3)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Int) (var6 Int) (var7 Int) (var8 Heap)) (not (and (inv_main24 var8 var7 var6 var5 var4 var3 var2 var1 var0) (not (is-O_Int (readHeap var8 var4)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Int) (var6 Int) (var7 Int) (var8 Heap)) (not (and (and (inv_main24 var8 var7 var6 var5 var4 var3 var2 var1 var0) (not (is-O_Int (readHeap var8 var4)))) (is-O_Int (readHeap var8 var4))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Heap)) (not (and (inv_main22 var7 var6 var5 var4 var3 var2 var1 var0) (not (is-O_Int (readHeap var7 var1)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Int) (var6 Int) (var7 Int) (var8 Heap)) (not (and (inv_main25 var8 var7 var6 var5 var4 var3 var2 var1 var0) (not (is-O_Int (readHeap var8 var2)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Int) (var6 Int) (var7 Int) (var8 Heap)) (not (and (and (inv_main25 var8 var7 var6 var5 var4 var3 var2 var1 var0) (not (is-O_Int (readHeap var8 var2)))) (is-O_Int (readHeap var8 var2))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Heap)) (not (and (inv_main20 var7 var6 var5 var4 var3 var2 var1 var0) (not (is-O_Int (readHeap var7 var0)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Int) (var6 Int) (var7 Int) (var8 Heap)) (not (and (inv_main26 var8 var7 var6 var5 var4 var3 var2 var1 var0) (not (is-O_Int (readHeap var8 var1)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Int) (var6 Int) (var7 Int) (var8 Heap)) (not (and (and (inv_main26 var8 var7 var6 var5 var4 var3 var2 var1 var0) (not (is-O_Int (readHeap var8 var1)))) (is-O_Int (readHeap var8 var1))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Int) (var5 Int) (var6 Int) (var7 Heap)) (not (and (inv_main17 var7 var6 var5 var4 var3 var2 var1 var0) (not (is-O_Int (readHeap var7 var0)))))))
(check-sat)
