(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status sat)
;===============================================================================
; Encoding of Heap sorts and operations
;-------------------------------------------------------------------------------
(define-sort Addr() Int)
(declare-datatypes ((AddrRange 0))
                   (((AddrRange (AddrRangeStart Addr) (AddrRangeSize Int)))))

(declare-datatypes ((HeapObject 0) (node 0))
                   (((O_Int (getInt Int)) (O_UInt (getUInt Int)) (O_Addr (getAddr Addr)) (O_node (getnode node)) (defObj))
                   ((node (h Int) (n Addr)))))
(declare-datatypes ((BatchAllocResHeap 0) (AllocResHeap 0) (Heap 0))
                   (((BatchAllocResHeap   (newBatchHeap Heap) (newAddrRange AddrRange)))
                   ((AllocResHeap   (newHeap Heap) (newAddr Addr)))
                    ((HeapCtor (HeapSize Int)
                               (HeapContents (Array Addr HeapObject))))))
(define-fun nullAddr  () Addr 0)
(define-fun validHeap     ((h Heap) (p Addr)) Bool
  (and (>= (HeapSize h) p) (> p 0)))
(define-fun emptyHeap () Heap (
  HeapCtor 0 (( as const (Array Addr HeapObject)) defObj)))
(define-fun readHeap ((h Heap) (p Addr)) HeapObject
  (ite (validHeap h p)
       (select (HeapContents h) p)
       defObj))
(define-fun writeHeap ((h Heap) (p Addr) (o HeapObject)) Heap
  (ite (validHeap h p)
       (HeapCtor (HeapSize h) (store (HeapContents h) p o))
       h))
(define-fun allocHeap   ((h Heap) (o HeapObject)) AllocResHeap
  (AllocResHeap (HeapCtor (+ 1 (HeapSize h))
                    (store (HeapContents h) (+ 1 (HeapSize h)) o))
          (+ 1 (HeapSize h))))
(define-fun Heap-eq     ((h1 Heap) (h2 Heap)) Bool
  (forall ((p Addr))
          (and (= (validHeap h1 p) (validHeap h2 p))
               (= (readHeap h1 p) (readHeap h2 p)))))
(define-fun nthAddrRange((ar AddrRange) (n Int)) Addr
  (ite (and (>= n 0) (< n (AddrRangeSize ar)))
       (+ (AddrRangeStart ar) n)
       nullAddr))
(define-fun withinHeap ((ar AddrRange ) (p Addr)) Bool
  (and (>= p (AddrRangeStart ar)) (< p (+ (AddrRangeStart ar) (AddrRangeSize ar)))))

(declare-fun batchAllocHeap     (Heap Heap HeapObject Int Int) Bool)
(declare-fun batchAllocPostHeap (Heap Heap HeapObject Int) Bool)

(assert (forall ((h1 Heap) (h2 Heap) (o HeapObject) (n1 Int) (n2 Int))
                (=> (and (> n2 0) (batchAllocHeap h1 h2 o n1 n2))
                   (batchAllocHeap h1 (newHeap (allocHeap h2 o)) o n1 (- n2 1)))))
(assert (forall ((h1 Heap) (h2 Heap) (o HeapObject) (n1 Int) (n2 Int))
                (=> (and (<= n2 0) (batchAllocHeap h1 h2 o n1 n2))
                   (batchAllocPostHeap h1 h2 o n1))))

(declare-fun batchWriteHeap     (Heap Heap Addr Addr HeapObject Int Int) Bool)
(declare-fun batchWritePostHeap (Heap Heap Addr HeapObject Int) Bool)

(assert (forall ((h1 Heap) (h2 Heap) (a1 Addr) (a2 Addr) (o HeapObject) (n1 Int) (n2 Int))
                (=> (and (> n2 0) (batchWriteHeap h1 h2 a1 a2 o n1 n2))
                   (batchWriteHeap h1 (writeHeap h2 a2 o) a1 (+ a2 1) o n1 (- n2 1)))))
(assert (forall ((h1 Heap) (h2 Heap) (a1 Addr) (a2 Addr) (o HeapObject) (n1 Int) (n2 Int))
                (=> (and (<= n2 0) (batchWriteHeap h1 h2 a1 a2 o n1 n2))
                   (batchWritePostHeap h1 h2 a1 o n1))))

;===============================================================================
(declare-fun inv_main12 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main13 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main14 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main2 (Heap) Bool)
(declare-fun inv_main20 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main23 (Heap Addr Addr Addr Int Int) Bool)
(declare-fun inv_main26 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main29 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main34 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main35 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main36 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main44 (Heap Addr Addr Addr Int) Bool)
(declare-fun inv_main7 (Heap Addr Int) Bool)
(assert (inv_main2 emptyHeap))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Heap)) (or (not (and (inv_main12 var4 var3 var2 var1 var0) (not (<= 0 (+ (+ (* (- 1) var0) 30) (* (- 1) 1)))))) (inv_main13 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Heap)) (or (not (and (and (inv_main12 var5 var4 var3 var2 var1) (<= 0 (+ (+ (* (- 1) var1) 30) (* (- 1) 1)))) (= var0 0))) (inv_main13 var5 var4 var3 var2 var1))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Heap) (var6 Int) (var7 Addr) (var8 Addr) (var9 Addr) (var10 Heap)) (or (not (and (and (and (and (and (and (and (inv_main26 var10 var9 var8 var7 var6) (= var0 (n (getnode (readHeap var10 var7))))) (= var1 var6)) (= var2 var7)) (= var3 var8)) (= var4 var9)) (= var5 var10)) (is-O_node (readHeap var10 var7)))) (inv_main12 var5 var4 var3 var0 (+ var1 1)))))
(assert (forall ((var0 Addr) (var1 node) (var2 Heap) (var3 Addr) (var4 Heap)) (or (not (and (and (and (inv_main2 var4) (= var3 (newAddr (allocHeap var4 (O_node var1))))) (= var2 (newHeap (allocHeap var4 (O_node var1))))) (not (= var3 nullAddr)))) (inv_main12 var2 var3 var0 var3 0))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Heap)) (or (not (and (and (inv_main13 var4 var3 var2 var1 var0) (is-O_node (readHeap var4 var1))) (is-O_node (readHeap var4 var1)))) (inv_main29 (writeHeap var4 var1 (O_node (node var0 (n (getnode (readHeap var4 var1)))))) var3 var2 var1 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap) (var4 Int) (var5 Int) (var6 Int) (var7 Addr) (var8 Addr) (var9 Addr) (var10 Heap)) (or (not (and (and (and (and (and (and (and (and (inv_main34 var10 var9 var8 var7 var6) (= var5 (h (getnode (readHeap var10 var7))))) (= var4 var6)) (= var0 var7)) (= var1 var8)) (= var2 var9)) (= var3 var10)) (is-O_node (readHeap var10 var7))) (= var5 var4))) (inv_main35 var3 var2 var1 var0 var4))))
(assert (forall ((var0 Int) (var1 Int) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Addr) (var6 Addr) (var7 Addr) (var8 node) (var9 Heap) (var10 Heap) (var11 Addr) (var12 Int) (var13 Addr) (var14 Addr) (var15 Addr) (var16 Heap)) (or (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (inv_main14 var16 var15 var14 var13 var12) (= var0 var12)) (= var2 var13)) (= var4 var14)) (= var6 var15)) (= var9 (writeHeap var16 var13 (O_node (node var12 (n (getnode (readHeap var16 var13)))))))) (is-O_node (readHeap var16 var13))) (is-O_node (readHeap var16 var13))) (= var11 (newAddr (allocHeap var9 (O_node var8))))) (= var1 var0)) (= var3 var2)) (= var5 var4)) (= var7 var6)) (= var10 (newHeap (allocHeap var9 (O_node var8))))) (not (= var11 nullAddr)))) (inv_main20 var10 var7 var11 var3 var1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Heap)) (or (not (and (and (inv_main12 var5 var4 var3 var2 var1) (<= 0 (+ (+ (* (- 1) var1) 30) (* (- 1) 1)))) (not (= var0 0)))) (inv_main14 var5 var4 var3 var2 var1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Heap)) (or (not (inv_main23 var5 var4 var3 var2 var1 var0)) (inv_main23 var5 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Addr) (var3 Addr) (var4 Addr) (var5 Addr) (var6 Addr) (var7 Addr) (var8 node) (var9 Heap) (var10 Heap) (var11 Addr) (var12 Int) (var13 Addr) (var14 Addr) (var15 Addr) (var16 Heap)) (or (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (inv_main14 var16 var15 var14 var13 var12) (= var0 var12)) (= var2 var13)) (= var4 var14)) (= var6 var15)) (= var9 (writeHeap var16 var13 (O_node (node var12 (n (getnode (readHeap var16 var13)))))))) (is-O_node (readHeap var16 var13))) (is-O_node (readHeap var16 var13))) (= var11 (newAddr (allocHeap var9 (O_node var8))))) (= var1 var0)) (= var3 var2)) (= var5 var4)) (= var7 var6)) (= var10 (newHeap (allocHeap var9 (O_node var8))))) (= var11 nullAddr))) (inv_main23 var10 var7 var11 var3 var1 1))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Heap) (var4 Addr) (var5 Int) (var6 Addr) (var7 Addr) (var8 Addr) (var9 Heap) (var10 Addr) (var11 Int) (var12 Addr) (var13 Addr) (var14 Addr) (var15 Heap)) (or (not (and (and (and (and (and (and (and (and (and (and (and (and (and (inv_main44 var15 var14 var13 var12 var11) (= var0 var5)) (= var1 var6)) (= var10 var4)) (= var2 var8)) (= var3 (writeHeap var9 var6 defObj))) (= var4 (n (getnode (readHeap var15 var12))))) (= var5 var11)) (= var6 var12)) (= var7 var13)) (= var8 var14)) (= var9 var15)) (is-O_node (readHeap var15 var12))) (not (= var10 nullAddr)))) (inv_main44 var3 var2 var10 var10 var0))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Heap) (var4 Addr) (var5 Int) (var6 Addr) (var7 Addr) (var8 Addr) (var9 Heap)) (or (not (and (and (and (and (and (and (and (and (and (inv_main29 var9 var8 var7 var6 var5) (= var0 var5)) (= var1 var6)) (= var2 var7)) (= var4 var8)) (= var3 (writeHeap var9 var6 (O_node (node (h (getnode (readHeap var9 var6))) 0))))) (is-O_node (readHeap var9 var6))) (is-O_node (readHeap var9 var6))) (= var4 nullAddr)) (not (= var4 nullAddr)))) (inv_main44 var3 var4 var2 var4 0))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Heap) (var4 Addr) (var5 Addr) (var6 Int) (var7 Addr) (var8 Addr) (var9 Addr) (var10 Heap)) (or (not (and (and (and (and (and (and (and (and (and (inv_main35 var10 var9 var8 var7 var6) (= var4 (n (getnode (readHeap var10 var7))))) (= var0 var6)) (= var1 var7)) (= var2 var8)) (= var5 var9)) (= var3 var10)) (is-O_node (readHeap var10 var7))) (= var4 nullAddr)) (not (= var5 nullAddr)))) (inv_main44 var3 var5 var2 var5 (+ var0 1)))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Addr) (var3 Heap) (var4 Int) (var5 Int) (var6 Int) (var7 Addr) (var8 Addr) (var9 Addr) (var10 Heap)) (or (not (and (and (and (and (and (and (and (and (inv_main34 var10 var9 var8 var7 var6) (= var5 (h (getnode (readHeap var10 var7))))) (= var4 var6)) (= var0 var7)) (= var1 var8)) (= var2 var9)) (= var3 var10)) (is-O_node (readHeap var10 var7))) (not (= var5 var4)))) (inv_main36 var3 var2 var1 var0 var4))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Heap) (var4 Addr) (var5 Int) (var6 Addr) (var7 Addr) (var8 Addr) (var9 Heap)) (or (not (and (and (and (and (and (and (and (and (inv_main29 var9 var8 var7 var6 var5) (= var0 var5)) (= var1 var6)) (= var2 var7)) (= var4 var8)) (= var3 (writeHeap var9 var6 (O_node (node (h (getnode (readHeap var9 var6))) 0))))) (is-O_node (readHeap var9 var6))) (is-O_node (readHeap var9 var6))) (not (= var4 nullAddr)))) (inv_main34 var3 var4 var2 var4 0))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Heap) (var5 Addr) (var6 Int) (var7 Addr) (var8 Addr) (var9 Addr) (var10 Heap)) (or (not (and (and (and (and (and (and (and (and (inv_main35 var10 var9 var8 var7 var6) (= var5 (n (getnode (readHeap var10 var7))))) (= var0 var6)) (= var1 var7)) (= var2 var8)) (= var3 var9)) (= var4 var10)) (is-O_node (readHeap var10 var7))) (not (= var5 nullAddr)))) (inv_main34 var4 var3 var2 var5 (+ var0 1)))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Heap)) (or (not (and (and (inv_main20 var4 var3 var2 var1 var0) (is-O_node (readHeap var4 var1))) (is-O_node (readHeap var4 var1)))) (inv_main26 (writeHeap var4 var1 (O_node (node (h (getnode (readHeap var4 var1))) var2))) var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Heap)) (or (not (inv_main7 var2 var1 var0)) (inv_main7 var2 var1 var0))))
(assert (forall ((var0 node) (var1 Heap) (var2 Addr) (var3 Heap)) (or (not (and (and (and (inv_main2 var3) (= var2 (newAddr (allocHeap var3 (O_node var0))))) (= var1 (newHeap (allocHeap var3 (O_node var0))))) (= var2 nullAddr))) (inv_main7 var1 var2 1))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Heap)) (not (and (inv_main14 var4 var3 var2 var1 var0) (not (is-O_node (readHeap var4 var1)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Heap)) (not (and (and (inv_main14 var4 var3 var2 var1 var0) (not (is-O_node (readHeap var4 var1)))) (is-O_node (readHeap var4 var1))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Heap)) (not (and (inv_main20 var4 var3 var2 var1 var0) (not (is-O_node (readHeap var4 var1)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Heap)) (not (and (and (inv_main20 var4 var3 var2 var1 var0) (not (is-O_node (readHeap var4 var1)))) (is-O_node (readHeap var4 var1))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Heap)) (not (and (inv_main26 var4 var3 var2 var1 var0) (not (is-O_node (readHeap var4 var1)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Heap)) (not (and (inv_main13 var4 var3 var2 var1 var0) (not (is-O_node (readHeap var4 var1)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Heap)) (not (and (and (inv_main13 var4 var3 var2 var1 var0) (not (is-O_node (readHeap var4 var1)))) (is-O_node (readHeap var4 var1))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Heap)) (not (and (inv_main29 var4 var3 var2 var1 var0) (not (is-O_node (readHeap var4 var1)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Heap)) (not (and (and (inv_main29 var4 var3 var2 var1 var0) (not (is-O_node (readHeap var4 var1)))) (is-O_node (readHeap var4 var1))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Heap)) (not (and (inv_main34 var4 var3 var2 var1 var0) (not (is-O_node (readHeap var4 var1)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Heap)) (not (inv_main36 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Heap)) (not (and (inv_main35 var4 var3 var2 var1 var0) (not (is-O_node (readHeap var4 var1)))))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Addr) (var4 Heap)) (not (and (inv_main44 var4 var3 var2 var1 var0) (not (is-O_node (readHeap var4 var1)))))))
(check-sat)
