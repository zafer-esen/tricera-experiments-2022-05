(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status unsat)
;===============================================================================
; Encoding of Heap sorts and operations
;-------------------------------------------------------------------------------
(define-sort Addr() Int)
(declare-datatypes ((AddrRange 0))
                   (((AddrRange (AddrRangeStart Addr) (AddrRangeSize Int)))))

(declare-datatypes ((HeapObject 0) (node 0))
                   (((O_Int (getInt Int)) (O_UInt (getUInt Int)) (O_Addr (getAddr Addr)) (O_node (getnode node)) (defObj))
                   ((node (L Addr) (R Addr)))))
(declare-datatypes ((BatchAllocResHeap 0) (AllocResHeap 0) (Heap 0))
                   (((BatchAllocResHeap   (newBatchHeap Heap) (newAddrRange AddrRange)))
                   ((AllocResHeap   (newHeap Heap) (newAddr Addr)))
                    ((HeapCtor (HeapSize Int)
                               (HeapContents (Array Addr HeapObject))))))
(define-fun nullAddr  () Addr 0)
(define-fun validHeap     ((h Heap) (p Addr)) Bool
  (and (>= (HeapSize h) p) (> p 0)))
(define-fun emptyHeap () Heap (
  HeapCtor 0 (( as const (Array Addr HeapObject)) defObj)))
(define-fun readHeap ((h Heap) (p Addr)) HeapObject
  (ite (validHeap h p)
       (select (HeapContents h) p)
       defObj))
(define-fun writeHeap ((h Heap) (p Addr) (o HeapObject)) Heap
  (ite (validHeap h p)
       (HeapCtor (HeapSize h) (store (HeapContents h) p o))
       h))
(define-fun allocHeap   ((h Heap) (o HeapObject)) AllocResHeap
  (AllocResHeap (HeapCtor (+ 1 (HeapSize h))
                    (store (HeapContents h) (+ 1 (HeapSize h)) o))
          (+ 1 (HeapSize h))))
(define-fun Heap-eq     ((h1 Heap) (h2 Heap)) Bool
  (forall ((p Addr))
          (and (= (validHeap h1 p) (validHeap h2 p))
               (= (readHeap h1 p) (readHeap h2 p)))))
(define-fun nthAddrRange((ar AddrRange) (n Int)) Addr
  (ite (and (>= n 0) (< n (AddrRangeSize ar)))
       (+ (AddrRangeStart ar) n)
       nullAddr))
(define-fun withinHeap ((ar AddrRange ) (p Addr)) Bool
  (and (>= p (AddrRangeStart ar)) (< p (+ (AddrRangeStart ar) (AddrRangeSize ar)))))

(declare-fun batchAllocHeap     (Heap Heap HeapObject Int Int) Bool)
(declare-fun batchAllocPostHeap (Heap Heap HeapObject Int) Bool)

(assert (forall ((h1 Heap) (h2 Heap) (o HeapObject) (n1 Int) (n2 Int))
                (=> (and (> n2 0) (batchAllocHeap h1 h2 o n1 n2))
                   (batchAllocHeap h1 (newHeap (allocHeap h2 o)) o n1 (- n2 1)))))
(assert (forall ((h1 Heap) (h2 Heap) (o HeapObject) (n1 Int) (n2 Int))
                (=> (and (<= n2 0) (batchAllocHeap h1 h2 o n1 n2))
                   (batchAllocPostHeap h1 h2 o n1))))

(declare-fun batchWriteHeap     (Heap Heap Addr Addr HeapObject Int Int) Bool)
(declare-fun batchWritePostHeap (Heap Heap Addr HeapObject Int) Bool)

(assert (forall ((h1 Heap) (h2 Heap) (a1 Addr) (a2 Addr) (o HeapObject) (n1 Int) (n2 Int))
                (=> (and (> n2 0) (batchWriteHeap h1 h2 a1 a2 o n1 n2))
                   (batchWriteHeap h1 (writeHeap h2 a2 o) a1 (+ a2 1) o n1 (- n2 1)))))
(assert (forall ((h1 Heap) (h2 Heap) (a1 Addr) (a2 Addr) (o HeapObject) (n1 Int) (n2 Int))
                (=> (and (<= n2 0) (batchWriteHeap h1 h2 a1 a2 o n1 n2))
                   (batchWritePostHeap h1 h2 a1 o n1))))

;===============================================================================
(declare-fun inv_main0 (Heap Int) Bool)
(declare-fun inv_main11 (Heap node Int Int Addr) Bool)
(declare-fun inv_main14 (Heap node Int Int Addr) Bool)
(declare-fun inv_main22 (Heap node Int Int) Bool)
(declare-fun inv_main3 (Heap node) Bool)
(declare-fun inv_main30 (Heap node Int Int) Bool)
(declare-fun inv_main35 (Heap node Int Int Int) Bool)
(declare-fun inv_main38 (Heap node Int Int Int) Bool)
(declare-fun inv_main42 (Heap node Int Int Int) Bool)
(declare-fun inv_main43 (Heap node Int Int) Bool)
(declare-fun inv_main48 (Heap node Int Int Int) Bool)
(declare-fun inv_main51 (Heap node Int Int Int) Bool)
(declare-fun inv_main6 (Heap node Int Int) Bool)
(declare-fun is_list_containing_x0 (Heap Addr Addr Heap Addr Addr) Bool)
(declare-fun is_list_containing_x1 (Heap Addr Addr Heap Addr Addr Int) Bool)
(declare-fun is_list_containing_x10 (Heap Addr Addr Heap Addr Addr Int) Bool)
(declare-fun is_list_containing_x11 (Heap Addr Addr Heap Addr Addr) Bool)
(declare-fun is_list_containing_x12 (Heap Addr Addr Heap Addr Addr Int) Bool)
(declare-fun is_list_containing_x2 (Heap Addr Addr Heap Addr Addr) Bool)
(declare-fun is_list_containing_x3 (Heap Addr Addr Heap Addr Addr) Bool)
(declare-fun is_list_containing_x4 (Heap Addr Addr Heap Addr Addr) Bool)
(declare-fun is_list_containing_x5 (Heap Addr Addr Heap Addr Addr) Bool)
(declare-fun is_list_containing_x6 (Heap Addr Addr Heap Addr Addr Int) Bool)
(declare-fun is_list_containing_x7 (Heap Addr Addr Heap Addr Addr) Bool)
(declare-fun is_list_containing_x8 (Heap Addr Addr Heap Addr Addr) Bool)
(declare-fun is_list_containing_x9 (Heap Addr Addr Heap Addr Addr) Bool)
(declare-fun is_list_containing_x_post (Heap Addr Addr Heap Int) Bool)
(declare-fun is_list_containing_x_pre (Heap Addr Addr) Bool)
(assert (forall ((var0 node) (var1 Heap)) (or (not (= var1 emptyHeap)) (inv_main3 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 node) (var4 Heap)) (or (not (and (inv_main6 var4 var3 var2 var1) (= var0 0))) (inv_main22 (newHeap (allocHeap var4 (O_node var3))) var3 var2 var1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 node) (var4 node) (var5 Heap) (var6 Addr) (var7 Int) (var8 Int) (var9 node) (var10 Heap)) (or (not (and (and (and (and (and (and (and (inv_main6 var10 var9 var8 var7) (not (= var0 0))) (= var6 (newAddr (allocHeap var10 (O_node var4))))) (= var1 var7)) (= var2 var8)) (= var3 var9)) (= var5 (newHeap (allocHeap var10 (O_node var4))))) (= var6 nullAddr))) (inv_main22 (newHeap (allocHeap var5 (O_node var3))) var3 var2 var1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 node) (var4 Heap) (var5 Int) (var6 Int) (var7 Int) (var8 node) (var9 Heap)) (or (not (and (and (and (and (and (and (and (inv_main51 var9 var8 var7 var6 var5) (= var0 var5)) (= var1 var6)) (= var2 var7)) (= var3 var8)) (= var4 (writeHeap var9 (L var8) (O_node (node (L (getnode (readHeap var9 (L var8)))) var5))))) (is-O_node (readHeap var9 (L var8)))) (is-O_node (readHeap var9 (L var8))))) (inv_main43 var4 var3 var2 var1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 node) (var5 Int) (var6 Int) (var7 Int) (var8 node) (var9 Heap)) (or (not (and (and (and (and (and (and (and (and (inv_main48 var9 var8 var7 var6 var5) (= var0 var5)) (= var1 var6)) (= var2 var7)) (= var4 var8)) (= var3 (writeHeap var9 (R var8) (O_node (node var5 (R (getnode (readHeap var9 (R var8))))))))) (is-O_node (readHeap var9 (R var8)))) (is-O_node (readHeap var9 (R var8)))) (= (L var4) nullAddr))) (inv_main43 var3 var4 var2 var1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 node) (var4 Heap)) (or (not (and (and (inv_main42 var4 var3 var2 var1 var0) (= (R var3) nullAddr)) (= (L var3) nullAddr))) (inv_main43 var4 var3 var2 var1))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 node) (var4 Heap)) (or (not (and (and (inv_main11 var4 var3 var2 var1 var0) (is-O_node (readHeap var4 var0))) (is-O_node (readHeap var4 var0)))) (inv_main14 (writeHeap var4 var0 (O_node (node var1 (R (getnode (readHeap var4 var0)))))) var3 var2 var1 var0))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 node) (var4 Heap) (var5 Addr) (var6 Int) (var7 Int) (var8 node) (var9 Heap) (var10 Int) (var11 Addr) (var12 Int) (var13 Int) (var14 node) (var15 Heap)) (or (not (and (and (and (and (and (and (and (and (and (and (and (and (and (inv_main14 var15 var14 var13 var12 var11) (= var0 var5)) (= var1 var6)) (= var2 var7)) (= var3 (node (L var8) var5))) (= var4 var9)) (= var5 var11)) (= var6 var12)) (= var7 var13)) (= var8 var14)) (= var9 (writeHeap var15 var11 (O_node (node (L (getnode (readHeap var15 var11))) 0))))) (is-O_node (readHeap var15 var11))) (is-O_node (readHeap var15 var11))) (not (= var10 0)))) (inv_main6 var4 var0 var2 var1))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 node) (var4 Heap) (var5 Addr) (var6 Int) (var7 Int) (var8 node) (var9 Heap) (var10 Int) (var11 Addr) (var12 Int) (var13 Int) (var14 node) (var15 Heap)) (or (not (and (and (and (and (and (and (and (and (and (and (and (and (and (inv_main14 var15 var14 var13 var12 var11) (= var0 var5)) (= var1 var6)) (= var2 var7)) (= var3 (node (L var8) var5))) (= var4 var9)) (= var5 var11)) (= var6 var12)) (= var7 var13)) (= var8 var14)) (= var9 (writeHeap var15 var11 (O_node (node (L (getnode (readHeap var15 var11))) 0))))) (is-O_node (readHeap var15 var11))) (is-O_node (readHeap var15 var11))) (= var10 0))) (inv_main6 var4 var3 var2 var1))))
(assert (forall ((var0 node) (var1 Heap) (var2 node) (var3 Heap) (var4 node) (var5 Heap)) (or (not (and (and (and (and (inv_main3 var5 var4) (= var0 (node (L var2) nullAddr))) (= var1 var3)) (= var2 (node nullAddr (R var4)))) (= var3 var5))) (inv_main6 var1 var0 1 1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 node) (var5 Int) (var6 Int) (var7 Int) (var8 node) (var9 Heap)) (or (not (and (and (and (and (and (and (and (and (inv_main48 var9 var8 var7 var6 var5) (= var0 var5)) (= var1 var6)) (= var2 var7)) (= var4 var8)) (= var3 (writeHeap var9 (R var8) (O_node (node var5 (R (getnode (readHeap var9 (R var8))))))))) (is-O_node (readHeap var9 (R var8)))) (is-O_node (readHeap var9 (R var8)))) (not (= (L var4) nullAddr)))) (inv_main51 var3 var4 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 node) (var4 Heap)) (or (not (and (and (inv_main42 var4 var3 var2 var1 var0) (= (R var3) nullAddr)) (not (= (L var3) nullAddr)))) (inv_main51 var4 var3 var2 var1 var2))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 node) (var4 Heap)) (or (not (and (inv_main42 var4 var3 var2 var1 var0) (not (= (R var3) nullAddr)))) (inv_main48 var4 var3 var2 var1 var2))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 node) (var4 Heap) (var5 Int) (var6 Heap) (var7 Int) (var8 Int) (var9 node) (var10 Heap)) (or (not (and (and (and (and (and (and (and (is_list_containing_x_post (newHeap (allocHeap var10 (O_node var9))) (newAddr (allocHeap var10 (O_node var9))) var8 var6 var5) (inv_main30 var10 var9 var8 var7)) (or (and (= var5 0) (= var0 1)) (and (not (= var5 0)) (= var0 0)))) (= var1 var7)) (= var2 var8)) (= var3 var9)) (= var4 var6)) (not (= 1 var8)))) (inv_main42 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 node) (var3 Heap)) (or (not (and (inv_main30 var3 var2 var1 var0) (= 1 var1))) (inv_main42 var3 var2 var1 var0 1))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Int) (var3 Int) (var4 node) (var5 Heap)) (or (not (and (inv_main43 var5 var4 var3 var2) (is_list_containing_x_post (newHeap (allocHeap var5 (O_node var4))) (newAddr (allocHeap var5 (O_node var4))) var3 var1 var0))) (inv_main0 var1 0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 node) (var4 Heap) (var5 Int) (var6 Int) (var7 Int) (var8 node) (var9 Heap)) (or (not (and (and (and (and (and (and (and (inv_main38 var9 var8 var7 var6 var5) (= var0 var5)) (= var1 var6)) (= var2 var7)) (= var3 var8)) (= var4 (writeHeap var9 (L var8) (O_node (node (L (getnode (readHeap var9 (L var8)))) (R var8)))))) (is-O_node (readHeap var9 (L var8)))) (is-O_node (readHeap var9 (L var8))))) (inv_main30 var4 var3 var2 var1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 node) (var5 Int) (var6 Int) (var7 Int) (var8 node) (var9 Heap)) (or (not (and (and (and (and (and (and (and (and (inv_main35 var9 var8 var7 var6 var5) (= var0 var5)) (= var1 var6)) (= var2 var7)) (= var4 var8)) (= var3 (writeHeap var9 (R var8) (O_node (node (L var8) (R (getnode (readHeap var9 (R var8))))))))) (is-O_node (readHeap var9 (R var8)))) (is-O_node (readHeap var9 (R var8)))) (= (L var4) nullAddr))) (inv_main30 var3 var4 var2 var1))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Int) (var3 Int) (var4 node) (var5 Heap)) (or (not (and (and (and (and (is_list_containing_x_post var5 (newAddr (allocHeap var5 (O_node var4))) var3 var1 var0) (inv_main22 var5 var4 var3 var2)) (not (= var0 0))) (= (R var4) nullAddr)) (= (L var4) nullAddr))) (inv_main30 var1 var4 var3 var2))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Int) (var3 Int) (var4 node) (var5 Heap)) (or (not (and (and (and (is_list_containing_x_post var5 (newAddr (allocHeap var5 (O_node var4))) var3 var1 var0) (inv_main22 var5 var4 var3 var2)) (not (= var0 0))) (not (= (R var4) nullAddr)))) (inv_main35 var1 var4 var3 var2 var3))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Heap) (var4 node) (var5 Int) (var6 Int) (var7 Int) (var8 node) (var9 Heap)) (or (not (and (and (and (and (and (and (and (and (inv_main35 var9 var8 var7 var6 var5) (= var0 var5)) (= var1 var6)) (= var2 var7)) (= var4 var8)) (= var3 (writeHeap var9 (R var8) (O_node (node (L var8) (R (getnode (readHeap var9 (R var8))))))))) (is-O_node (readHeap var9 (R var8)))) (is-O_node (readHeap var9 (R var8)))) (not (= (L var4) nullAddr)))) (inv_main38 var3 var4 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Int) (var3 Int) (var4 node) (var5 Heap)) (or (not (and (and (and (and (is_list_containing_x_post var5 (newAddr (allocHeap var5 (O_node var4))) var3 var1 var0) (inv_main22 var5 var4 var3 var2)) (not (= var0 0))) (= (R var4) nullAddr)) (not (= (L var4) nullAddr)))) (inv_main38 var1 var4 var3 var2 var3))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 node) (var4 node) (var5 Heap) (var6 Addr) (var7 Int) (var8 Int) (var9 node) (var10 Heap)) (or (not (and (and (and (and (and (and (and (inv_main6 var10 var9 var8 var7) (not (= var0 0))) (= var6 (newAddr (allocHeap var10 (O_node var4))))) (= var1 var7)) (= var2 var8)) (= var3 var9)) (= var5 (newHeap (allocHeap var10 (O_node var4))))) (not (= var6 nullAddr)))) (inv_main11 var5 var3 var2 var1 var6))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 node) (var4 Heap)) (not (and (inv_main11 var4 var3 var2 var1 var0) (not (is-O_node (readHeap var4 var0)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 node) (var4 Heap)) (not (and (and (inv_main11 var4 var3 var2 var1 var0) (not (is-O_node (readHeap var4 var0)))) (is-O_node (readHeap var4 var0))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 node) (var4 Heap)) (not (and (inv_main14 var4 var3 var2 var1 var0) (not (is-O_node (readHeap var4 var0)))))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Int) (var3 node) (var4 Heap)) (not (and (and (inv_main14 var4 var3 var2 var1 var0) (not (is-O_node (readHeap var4 var0)))) (is-O_node (readHeap var4 var0))))))
(assert (forall ((var0 Int) (var1 Int) (var2 node) (var3 Heap)) (or (not (inv_main22 var3 var2 var1 var0)) (is_list_containing_x_pre var3 (newAddr (allocHeap var3 (O_node var2))) var1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 node) (var4 Heap)) (not (and (inv_main35 var4 var3 var2 var1 var0) (not (is-O_node (readHeap var4 (R var3))))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 node) (var4 Heap)) (not (and (and (inv_main35 var4 var3 var2 var1 var0) (not (is-O_node (readHeap var4 (R var3))))) (is-O_node (readHeap var4 (R var3)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 node) (var4 Heap)) (not (and (inv_main38 var4 var3 var2 var1 var0) (not (is-O_node (readHeap var4 (L var3))))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 node) (var4 Heap)) (not (and (and (inv_main38 var4 var3 var2 var1 var0) (not (is-O_node (readHeap var4 (L var3))))) (is-O_node (readHeap var4 (L var3)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 node) (var3 Heap)) (or (not (inv_main30 var3 var2 var1 var0)) (is_list_containing_x_pre var3 (newAddr (allocHeap var3 (O_node var2))) var1))))
(assert (forall ((var0 Int) (var1 Int) (var2 node) (var3 Heap)) (or (not (and (inv_main30 var3 var2 var1 var0) (not (= 1 var1)))) (is_list_containing_x_pre (newHeap (allocHeap var3 (O_node var2))) (newAddr (allocHeap var3 (O_node var2))) var1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 node) (var4 Heap)) (not (and (inv_main42 var4 var3 var2 var1 var0) (= var0 0)))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 node) (var4 Heap)) (not (and (inv_main48 var4 var3 var2 var1 var0) (not (is-O_node (readHeap var4 (R var3))))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 node) (var4 Heap)) (not (and (and (inv_main48 var4 var3 var2 var1 var0) (not (is-O_node (readHeap var4 (R var3))))) (is-O_node (readHeap var4 (R var3)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 node) (var4 Heap)) (not (and (inv_main51 var4 var3 var2 var1 var0) (not (is-O_node (readHeap var4 (L var3))))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 node) (var4 Heap)) (not (and (and (inv_main51 var4 var3 var2 var1 var0) (not (is-O_node (readHeap var4 (L var3))))) (is-O_node (readHeap var4 (L var3)))))))
(assert (forall ((var0 Int) (var1 Int) (var2 node) (var3 Heap)) (or (not (inv_main43 var3 var2 var1 var0)) (is_list_containing_x_pre var3 (newAddr (allocHeap var3 (O_node var2))) var1))))
(assert (forall ((var0 Int) (var1 Int) (var2 node) (var3 Heap)) (or (not (inv_main43 var3 var2 var1 var0)) (is_list_containing_x_pre (newHeap (allocHeap var3 (O_node var2))) (newAddr (allocHeap var3 (O_node var2))) var1))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Int) (var3 Int) (var4 node) (var5 Heap)) (not (and (and (is_list_containing_x_post (newHeap (allocHeap var5 (O_node var4))) (newAddr (allocHeap var5 (O_node var4))) var3 var1 var0) (inv_main43 var5 var4 var3 var2)) (= var0 0)))))
(assert (forall ((var0 Addr) (var1 Int) (var2 Heap)) (not (and (inv_main0 var2 var1) (not (= (readHeap var2 var0) defObj))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap)) (or (not (is_list_containing_x_pre var2 var1 var0)) (is_list_containing_x0 var2 var1 var0 var2 var1 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap) (var3 Addr) (var4 Addr) (var5 Heap)) (or (not (and (is_list_containing_x0 var5 var4 var3 var2 var1 var0) (= var4 var3))) (is_list_containing_x4 var5 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap) (var3 Addr) (var4 Addr) (var5 Heap)) (or (not (and (is_list_containing_x0 var5 var4 var3 var2 var1 var0) (not (= var4 var3)))) (is_list_containing_x5 var5 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap) (var3 Addr) (var4 Addr) (var5 Heap)) (or (not (is_list_containing_x4 var5 var4 var3 var2 var1 var0)) (is_list_containing_x6 var5 var4 var3 var2 var1 var0 1))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Heap) (var4 Addr) (var5 Addr) (var6 Heap)) (or (not (is_list_containing_x6 var6 var5 var4 var3 var2 var1 var0)) (is_list_containing_x1 var6 var5 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap) (var3 Addr) (var4 Addr) (var5 Heap)) (or (not (is_list_containing_x5 var5 var4 var3 var2 var1 var0)) (is_list_containing_x3 var5 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap) (var3 Addr) (var4 Addr) (var5 Heap)) (or (not (and (and (is_list_containing_x3 var5 var4 var3 var2 var1 var0) (not (= (R (getnode (readHeap var5 var4))) nullAddr))) (is-O_node (readHeap var5 var4)))) (is_list_containing_x8 var5 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap) (var3 Addr) (var4 Addr) (var5 Heap)) (or (not (and (and (is_list_containing_x3 var5 var4 var3 var2 var1 var0) (= (R (getnode (readHeap var5 var4))) nullAddr)) (is-O_node (readHeap var5 var4)))) (is_list_containing_x9 var5 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Heap) (var2 Addr) (var3 Addr) (var4 Heap) (var5 Addr) (var6 Addr) (var7 Heap)) (or (not (and (and (is_list_containing_x_post var7 (R (getnode (readHeap var7 var6))) var5 var1 var0) (is_list_containing_x8 var7 var6 var5 var4 var3 var2)) (is-O_node (readHeap var7 var6)))) (is_list_containing_x10 var1 var6 var5 var4 var3 var2 var0))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Heap) (var4 Addr) (var5 Addr) (var6 Heap)) (or (not (is_list_containing_x10 var6 var5 var4 var3 var2 var1 var0)) (is_list_containing_x1 var6 var5 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap) (var3 Addr) (var4 Addr) (var5 Heap)) (or (not (is_list_containing_x9 var5 var4 var3 var2 var1 var0)) (is_list_containing_x7 var5 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap) (var3 Addr) (var4 Addr) (var5 Heap)) (or (not (is_list_containing_x7 var5 var4 var3 var2 var1 var0)) (is_list_containing_x12 var5 var4 var3 var2 var1 var0 0))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Heap) (var4 Addr) (var5 Addr) (var6 Heap)) (or (not (is_list_containing_x12 var6 var5 var4 var3 var2 var1 var0)) (is_list_containing_x1 var6 var5 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap) (var3 Addr) (var4 Addr) (var5 Heap)) (or (not (is_list_containing_x11 var5 var4 var3 var2 var1 var0)) (is_list_containing_x2 var5 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Addr) (var2 Addr) (var3 Heap) (var4 Addr) (var5 Addr) (var6 Heap)) (or (not (is_list_containing_x1 var6 var5 var4 var3 var2 var1 var0)) (is_list_containing_x_post var3 var2 var1 var6 var0))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap) (var3 Addr) (var4 Addr) (var5 Heap)) (not (and (is_list_containing_x3 var5 var4 var3 var2 var1 var0) (not (is-O_node (readHeap var5 var4)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap) (var3 Addr) (var4 Addr) (var5 Heap)) (not (and (is_list_containing_x8 var5 var4 var3 var2 var1 var0) (not (is-O_node (readHeap var5 var4)))))))
(assert (forall ((var0 Addr) (var1 Addr) (var2 Heap) (var3 Addr) (var4 Addr) (var5 Heap)) (or (not (and (is_list_containing_x8 var5 var4 var3 var2 var1 var0) (is-O_node (readHeap var5 var4)))) (is_list_containing_x_pre var5 (R (getnode (readHeap var5 var4))) var3))))
(check-sat)
