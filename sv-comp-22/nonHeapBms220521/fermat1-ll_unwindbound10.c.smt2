(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status unsat)
(declare-fun inv_main23 (Int Int Int Int Int Int) Bool)
(declare-fun inv_main24 (Int Int Int Int Int Int) Bool)
(declare-fun inv_main25 (Int Int Int Int Int Int) Bool)
(declare-fun inv_main32 (Int Int Int Int Int Int) Bool)
(declare-fun inv_main33 (Int Int Int Int Int Int) Bool)
(declare-fun inv_main4 (Int Int Int Int Int Int) Bool)
(declare-fun inv_main41 (Int Int Int Int Int Int) Bool)
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int)) (inv_main4 0 var4 var3 var2 var1 var0)))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main25 var5 var4 var3 var2 var1 var0) (and (<= 0 (+ (+ 10 (* (- 1) var5)) (- 1))) (not (= var0 0))))) (inv_main33 (+ var5 1) var4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main33 var5 var4 var3 var2 var1 var0) (and (<= 0 (+ (+ 10 (* (- 1) var5)) (- 1))) (<= 0 (+ var0 (- 1)))))) (inv_main33 (+ var5 1) var4 var3 var2 (+ var1 2) (+ var0 (* (- 1) var1))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main33 var5 var4 var3 var2 var1 var0) (not (<= 0 (+ var0 (- 1)))))) (inv_main32 var5 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main41 var5 var4 var3 var2 var1 var0) (<= 0 (+ (* (- 1) var0) (- 1))))) (inv_main32 var5 var4 var3 (+ var2 2) var1 (+ var0 var2)))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main25 var5 var4 var3 var2 var1 var0) (and (not (<= 0 (+ (+ 10 (* (- 1) var5)) (- 1)))) (not (= var0 0))))) (inv_main32 (+ var5 1) var4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main33 var5 var4 var3 var2 var1 var0) (and (not (<= 0 (+ (+ 10 (* (- 1) var5)) (- 1)))) (<= 0 (+ var0 (- 1)))))) (inv_main32 (+ var5 1) var4 var3 var2 (+ var1 2) (+ var0 (* (- 1) var1))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main32 var5 var4 var3 var2 var1 var0) (<= 0 (+ (+ 10 (* (- 1) var5)) (- 1))))) (inv_main41 (+ var5 1) var4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main32 var5 var4 var3 var2 var1 var0) (not (<= 0 (+ (+ 10 (* (- 1) var5)) (- 1)))))) (inv_main23 (+ var5 1) var4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int) (var6 Int) (var7 Int) (var8 Int) (var9 Int) (var10 Int) (var11 Int) (var12 Int) (var13 Int) (var14 Int) (var15 Int) (var16 Int) (var17 Int) (var18 Int) (var19 Int) (var20 Int) (var21 Int) (var22 Int) (var23 Int) (var24 Int) (var25 Int)) (or (not (and (inv_main4 var21 var20 var19 var18 var17 var16) (and (and (not (= var15 0)) (and (and (and (and (and (and (= var14 var13) (= var12 var11)) (= var10 var9)) (= var8 var7)) (= var6 var5)) (= var4 var3)) (or (and (and (and (and (and (and (<= 0 (+ (+ 2 (* (- 1) var22)) (- 1))) (<= 0 (+ (+ 2 (* 1 var22)) (- 1)))) (or (not (<= 0 (+ var22 (- 1)))) (<= 0 (+ var11 (- 1))))) (or (not (<= 0 (+ (* (- 1) var22) (- 1)))) (<= 0 (+ (* (- 1) var11) (- 1))))) (= var11 (+ (* 2 var23) var22))) (= var22 1)) (= var15 1)) (and (not (or (not (and (and (and (and (<= 0 (+ (+ 2 (* (- 1) var24)) (- 1))) (<= 0 (+ (+ 2 (* 1 var24)) (- 1)))) (or (not (<= 0 (+ var24 (- 1)))) (<= 0 (+ var11 (- 1))))) (or (not (<= 0 (+ (* (- 1) var24) (- 1)))) (<= 0 (+ (* (- 1) var11) (- 1))))) (= var11 (+ (* 2 var25) var24)))) (= var24 1))) (= var15 0))))) (and (not (= var2 0)) (and (and (and (and (and (and (= var13 var21) (= var11 var1)) (= var9 var0)) (= var7 var18)) (= var5 var17)) (= var3 var16)) (or (and (<= 0 (+ (+ var1 (* (- 1) (* (+ var0 (- 1)) (+ var0 (- 1))))) (- 1))) (= var2 1)) (and (not (<= 0 (+ (+ var1 (* (- 1) (* (+ var0 (- 1)) (+ var0 (- 1))))) (- 1)))) (= var2 0)))))))) (inv_main23 var14 var12 var10 (+ (* 2 var10) 1) 1 (+ (* var10 var10) (* (- 1) var12))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main41 var5 var4 var3 var2 var1 var0) (not (<= 0 (+ (* (- 1) var0) (- 1)))))) (inv_main23 var5 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main23 var5 var4 var3 var2 var1 var0) (not (<= 0 (+ (+ 10 (* (- 1) var5)) (- 1)))))) (inv_main24 (+ var5 1) var4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main25 var5 var4 var3 var2 var1 var0) (= var0 0))) (inv_main24 var5 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (or (not (and (inv_main23 var5 var4 var3 var2 var1 var0) (<= 0 (+ (+ 10 (* (- 1) var5)) (- 1))))) (inv_main25 (+ var5 1) var4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (not (and (inv_main25 var5 var4 var3 var2 var1 var0) (not (= (* 4 (+ var4 var0)) (+ (+ (+ (* var2 var2) (* (- 1) (* var1 var1))) (* (- 2) var2)) (* 2 var1))))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (not (and (inv_main33 var5 var4 var3 var2 var1 var0) (not (= (* 4 (+ var4 var0)) (+ (+ (+ (* var2 var2) (* (- 1) (* var1 var1))) (* (- 2) var2)) (* 2 var1))))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (not (and (inv_main41 var5 var4 var3 var2 var1 var0) (not (= (* 4 (+ var4 var0)) (+ (+ (+ (* var2 var2) (* (- 1) (* var1 var1))) (* (- 2) var2)) (* 2 var1))))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int)) (not (and (inv_main24 var5 var4 var3 var2 var1 var0) (not (= (* 4 var4) (+ (+ (+ (* var2 var2) (* (- 1) (* var1 var1))) (* (- 2) var2)) (* 2 var1))))))))
(check-sat)
