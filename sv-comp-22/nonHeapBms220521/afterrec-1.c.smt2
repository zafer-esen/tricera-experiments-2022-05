(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status unsat)
(declare-fun exit () Bool)
(declare-fun f0 (Int Int) Bool)
(declare-fun f1 (Int Int) Bool)
(declare-fun f2 (Int Int) Bool)
(declare-fun f3 (Int Int) Bool)
(declare-fun f4 (Int Int) Bool)
(declare-fun f5 (Int Int) Bool)
(declare-fun f6 (Int Int) Bool)
(declare-fun f7 (Int Int) Bool)
(declare-fun f8 (Int Int) Bool)
(declare-fun f_post (Int) Bool)
(declare-fun f_pre (Int) Bool)
(declare-fun inv_main2 () Bool)
(assert inv_main2)
(assert (or (not inv_main2) (f_pre 4)))
(assert (forall ((var0 Int)) (or (not (f_pre var0)) (f0 var0 var0))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (and (f0 var1 var0) (<= 0 (+ (+ 3 (* (- 1) var1)) (- 1))))) (f4 var1 var0))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (and (f0 var1 var0) (not (<= 0 (+ (+ 3 (* (- 1) var1)) (- 1)))))) (f5 var1 var0))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (f4 var1 var0)) (f1 var1 var0))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (f5 var1 var0)) (f3 var1 var0))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (f3 var1 var0)) (f6 (+ var1 (- 1)) var0))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (and (f6 var1 var0) (f_post var1))) (f7 var1 var0))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (f7 var1 var0)) (f8 var1 var0))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (f8 var1 var0)) exit)))
(assert (forall ((var0 Int) (var1 Int)) (or (not (f2 var1 var0)) (f1 var1 var0))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (f1 var1 var0)) (f_post var0))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (f6 var1 var0)) (f_pre var1))))
(assert (forall ((var0 Int) (var1 Int)) (not (f7 var1 var0))))
(check-sat)
