(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status unsat)
(declare-fun addition0 (Int Int Int Int) Bool)
(declare-fun addition1 (Int Int Int Int Int) Bool)
(declare-fun addition10 (Int Int Int Int) Bool)
(declare-fun addition2 (Int Int Int Int) Bool)
(declare-fun addition3 (Int Int Int Int) Bool)
(declare-fun addition4 (Int Int Int Int) Bool)
(declare-fun addition5 (Int Int Int Int) Bool)
(declare-fun addition6 (Int Int Int Int) Bool)
(declare-fun addition7 (Int Int Int Int) Bool)
(declare-fun addition8 (Int Int Int Int) Bool)
(declare-fun addition9 (Int Int Int Int) Bool)
(declare-fun addition_post (Int Int Int) Bool)
(declare-fun addition_pre (Int Int) Bool)
(declare-fun inv_main10 (Int Int) Bool)
(declare-fun inv_main15 (Int Int Int) Bool)
(declare-fun inv_main2 () Bool)
(assert inv_main2)
(assert (forall ((var0 Int) (var1 Int) (var2 Int)) (or (not (and (and (inv_main10 var2 var1) (addition_post var2 var1 var0)) (not (= var0 (+ var2 (* (- 1) var1)))))) (inv_main15 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (and inv_main2 (and (and (not (<= 0 (+ (* (- 1) var1) (- 1)))) (not (<= 0 (+ (+ var1 (- 1073741823)) (- 1))))) (and (not (<= 0 (+ (* (- 1) var0) (- 1)))) (not (<= 0 (+ (+ var0 (- 1073741823)) (- 1)))))))) (inv_main10 var0 var1))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (inv_main10 var1 var0)) (addition_pre var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int)) (not (inv_main15 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (addition_pre var1 var0)) (addition0 var1 var0 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (addition0 var3 var2 var1 var0) (= var2 0))) (addition4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (addition0 var3 var2 var1 var0) (not (= var2 0)))) (addition5 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (addition4 var3 var2 var1 var0)) (addition1 var3 var2 var1 var0 var3))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (addition5 var3 var2 var1 var0)) (addition3 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (addition3 var3 var2 var1 var0) (<= 0 (+ var2 (- 1))))) (addition7 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (addition3 var3 var2 var1 var0) (not (<= 0 (+ var2 (- 1)))))) (addition8 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int)) (or (not (and (addition7 var4 var3 var2 var1) (addition_post (+ var4 1) (+ var3 (- 1)) var0))) (addition1 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (addition8 var3 var2 var1 var0)) (addition6 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (addition6 var3 var2 var1 var0) (<= 0 (+ (* (- 1) var2) (- 1))))) (addition9 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (addition6 var3 var2 var1 var0) (not (<= 0 (+ (* (- 1) var2) (- 1)))))) (addition10 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int)) (or (not (and (addition9 var4 var3 var2 var1) (addition_post (+ var4 (- 1)) (+ var3 1) var0))) (addition1 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (addition10 var3 var2 var1 var0)) (addition2 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int)) (or (not (addition1 var4 var3 var2 var1 var0)) (addition_post var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (addition7 var3 var2 var1 var0)) (addition_pre (+ var3 1) (+ var2 (- 1))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (addition9 var3 var2 var1 var0)) (addition_pre (+ var3 (- 1)) (+ var2 1)))))
(check-sat)
