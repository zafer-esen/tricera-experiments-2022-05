(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status sat)
(declare-fun fibonacci0 (Int Int) Bool)
(declare-fun fibonacci1 (Int Int Int) Bool)
(declare-fun fibonacci3 (Int Int) Bool)
(declare-fun fibonacci4 (Int Int) Bool)
(declare-fun fibonacci5 (Int Int) Bool)
(declare-fun fibonacci6 (Int Int) Bool)
(declare-fun fibonacci_post (Int Int) Bool)
(declare-fun fibonacci_pre (Int) Bool)
(declare-fun inv_main10 (Int Int) Bool)
(declare-fun inv_main2 () Bool)
(declare-fun inv_main5 (Int) Bool)
(assert inv_main2)
(assert (forall ((var0 Int)) (or (not (and inv_main2 (not (<= 0 (+ (+ var0 (- 46)) (- 1)))))) (inv_main5 var0))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (and (and (inv_main5 var1) (fibonacci_post var1 var0)) (and (not (<= 0 (+ (+ 9 (* (- 1) var1)) (- 1)))) (not (<= 0 (+ var0 (- 34))))))) (inv_main10 var1 var0))))
(assert (forall ((var0 Int)) (or (not (inv_main5 var0)) (fibonacci_pre var0))))
(assert (forall ((var0 Int) (var1 Int)) (not (inv_main10 var1 var0))))
(assert (forall ((var0 Int)) (or (not (fibonacci_pre var0)) (fibonacci0 var0 var0))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (and (fibonacci0 var1 var0) (<= 0 (+ (+ 1 (* (- 1) var1)) (- 1))))) (fibonacci3 var1 var0))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (and (fibonacci0 var1 var0) (not (<= 0 (+ (+ 1 (* (- 1) var1)) (- 1)))))) (fibonacci4 var1 var0))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (fibonacci3 var1 var0)) (fibonacci1 var1 var0 0))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (and (fibonacci4 var1 var0) (= var1 1))) (fibonacci5 var1 var0))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (and (fibonacci4 var1 var0) (not (= var1 1)))) (fibonacci6 var1 var0))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (fibonacci5 var1 var0)) (fibonacci1 var1 var0 1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (and (fibonacci6 var3 var2) (fibonacci_post (+ var3 (- 1)) var1)) (fibonacci_post (+ var3 (- 2)) var0))) (fibonacci1 var3 var2 (+ var1 var0)))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int)) (or (not (fibonacci1 var2 var1 var0)) (fibonacci_post var1 var0))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (fibonacci6 var1 var0)) (fibonacci_pre (+ var1 (- 1))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int)) (or (not (and (fibonacci6 var2 var1) (fibonacci_post (+ var2 (- 1)) var0))) (fibonacci_pre (+ var2 (- 2))))))
(check-sat)
