(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status sat)
(declare-fun inv_main16 (Int Int) Bool)
(declare-fun inv_main19 (Int Int) Bool)
(declare-fun inv_main2 () Bool)
(assert inv_main2)
(assert (forall ((var0 Int) (var1 Int) (var2 Int)) (or (not (and (inv_main16 var2 var1) (and (not (= var0 0)) (and (<= 0 (+ (+ 100 (* (- 1) var2)) (- 1))) (<= 0 (+ (+ var1 (- 100)) (- 1))))))) (inv_main16 (+ var2 1) var1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int)) (or (not (and (inv_main16 var2 var1) (and (= var0 0) (and (<= 0 (+ (+ 100 (* (- 1) var2)) (- 1))) (<= 0 (+ (+ var1 (- 100)) (- 1))))))) (inv_main16 (+ var2 (- 1)) (+ var1 (- 1))))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (and inv_main2 (and (<= 0 (+ (+ 200 (* (- 1) var1)) (- 1))) (and (<= 0 (+ (+ var1 (- 100)) (- 1))) (and (<= 0 (+ (+ 200 (* (- 1) var0)) (- 1))) (<= 0 (+ (+ var0 100) (- 1)))))))) (inv_main16 var0 var1))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (and (inv_main16 var1 var0) (or (not (<= 0 (+ (+ 100 (* (- 1) var1)) (- 1)))) (not (<= 0 (+ (+ var0 (- 100)) (- 1))))))) (inv_main19 var1 var0))))
(assert (forall ((var0 Int) (var1 Int)) (not (and (inv_main19 var1 var0) (and (not (<= 0 (+ var1 (- 100)))) (not (<= 0 (+ 100 (* (- 1) var0)))))))))
(check-sat)
