(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status sat)
(declare-fun inv_main10 (Int Int Int Int) Bool)
(declare-fun inv_main13 (Int Int Int Int) Bool)
(declare-fun inv_main16 (Int Int Int Int) Bool)
(declare-fun inv_main19 (Int Int Int Int) Bool)
(declare-fun inv_main2 () Bool)
(declare-fun inv_main22 (Int Int Int Int) Bool)
(declare-fun inv_main5 (Int Int Int Int) Bool)
(declare-fun inv_main9 (Int Int Int Int) Bool)
(assert inv_main2)
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (inv_main13 var3 var2 var1 var0) (not (<= 0 (+ var2 (- 1)))))) (inv_main16 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (inv_main16 var3 var2 var1 var0) (<= 0 (+ var0 (- 1))))) (inv_main16 var3 (+ var2 1) var1 (+ var0 (- 1))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (inv_main5 var3 var2 var1 var0) (<= 0 (+ var2 (- 1))))) (inv_main5 var3 (+ var2 (- 1)) (+ var1 1) var0))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (and inv_main2 (and (<= 0 var1) (<= 0 var0)))) (inv_main5 var0 var0 0 var1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (inv_main9 var3 var2 var1 var0) (not (<= 0 (+ var0 (- 1)))))) (inv_main10 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (inv_main10 var3 var2 var1 var0) (<= 0 (+ var1 (- 1))))) (inv_main10 var3 var2 (+ var1 (- 1)) (+ var0 1)))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (inv_main10 var3 var2 var1 var0) (not (<= 0 (+ var1 (- 1)))))) (inv_main13 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (inv_main13 var3 var2 var1 var0) (<= 0 (+ var2 (- 1))))) (inv_main13 var3 (+ var2 (- 1)) (+ var1 1) var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (inv_main19 var3 var2 var1 var0) (not (<= 0 (+ var1 (- 1)))))) (inv_main22 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (inv_main5 var3 var2 var1 var0) (not (<= 0 (+ var2 (- 1)))))) (inv_main9 var3 var2 var1 var1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (inv_main9 var3 var2 var1 var0) (<= 0 (+ var0 (- 1))))) (inv_main9 var3 (+ var2 1) var1 (+ var0 (- 1))))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (inv_main16 var3 var2 var1 var0) (not (<= 0 (+ var0 (- 1)))))) (inv_main19 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (inv_main19 var3 var2 var1 var0) (<= 0 (+ var1 (- 1))))) (inv_main19 var3 (+ var2 (- 1)) (+ var1 (- 1)) var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (not (and (inv_main22 var3 var2 var1 var0) (not (= var2 0))))))
(check-sat)
