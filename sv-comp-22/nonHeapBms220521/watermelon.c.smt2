(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status sat)
(declare-fun inv_main2 (Int Int) Bool)
(declare-fun inv_main20 (Int Int Int Int Int Int Int Int) Bool)
(declare-fun inv_main26 (Int Int Int Int Int) Bool)
(declare-fun inv_main37 (Int Int Int Int Int Int Int Int) Bool)
(declare-fun inv_main9 (Int Int Int Int Int) Bool)
(assert (inv_main2 1 0))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int) (var6 Int) (var7 Int)) (or (not (and (inv_main20 var7 var6 var5 var4 var3 var2 var1 var0) (and (not (= var0 var2)) (not (<= 0 (+ (+ var2 (* (- 1) var0)) (- 1))))))) (inv_main9 var7 var6 var5 var6 var3))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int) (var6 Int) (var7 Int)) (or (not (and (inv_main20 var7 var6 var5 var4 var3 var2 var1 var0) (and (= var0 var2) (not (<= 0 (+ (+ var2 (* (- 1) var0)) (- 1))))))) (inv_main9 var7 var6 var5 var1 var3))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int)) (or (not (and (inv_main2 var2 var1) (and (and (<= 0 (+ (+ 4 (* (- 1) var0)) (- 1))) (and (<= 0 (+ var0 (- 1))) (<= 0 (+ (+ 10000000 (* (- 1) var0)) (- 1))))) (<= 0 var0)))) (inv_main9 var2 var1 var0 var1 var2))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int) (var6 Int) (var7 Int)) (or (not (and (inv_main20 var7 var6 var5 var4 var3 var2 var1 var0) (<= 0 (+ (+ var2 (* (- 1) var0)) (- 1))))) (inv_main20 var7 var6 var5 var4 var3 var2 var1 (+ var0 2)))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int)) (or (not (and (inv_main2 var2 var1) (and (and (not (<= 0 (+ (+ 4 (* (- 1) var0)) (- 1)))) (and (<= 0 (+ var0 (- 1))) (<= 0 (+ (+ 10000000 (* (- 1) var0)) (- 1))))) (<= 0 var0)))) (inv_main20 var2 var1 var0 var2 var2 var0 var2 0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int) (var6 Int) (var7 Int)) (or (not (and (inv_main37 var7 var6 var5 var4 var3 var2 var1 var0) (and (not (= var0 var2)) (not (<= 0 (+ (+ var2 (* (- 1) var0)) (- 1))))))) (inv_main26 var7 var6 var5 var4 var6))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int) (var6 Int) (var7 Int)) (or (not (and (inv_main37 var7 var6 var5 var4 var3 var2 var1 var0) (and (= var0 var2) (not (<= 0 (+ (+ var2 (* (- 1) var0)) (- 1))))))) (inv_main26 var7 var6 var5 var4 var1))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int)) (or (not (and (inv_main9 var4 var3 var2 var1 var0) (<= 0 (+ (+ 4 (* (- 1) var2)) (- 1))))) (inv_main26 var4 var3 var2 var1 var3))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int) (var5 Int) (var6 Int) (var7 Int)) (or (not (and (inv_main37 var7 var6 var5 var4 var3 var2 var1 var0) (<= 0 (+ (+ var2 (* (- 1) var0)) (- 1))))) (inv_main37 var7 var6 var5 var4 var3 var2 var1 (+ var0 2)))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int)) (or (not (and (inv_main9 var4 var3 var2 var1 var0) (not (<= 0 (+ (+ 4 (* (- 1) var2)) (- 1)))))) (inv_main37 var4 var3 var2 var1 var0 var2 var4 0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int)) (not (and (inv_main26 var4 var3 var2 var1 var0) (not (= var1 var0))))))
(check-sat)
