(set-logic HORN)
(set-info :source |
    Benchmark: C_VC
    Output by Princess (http://www.philipp.ruemmer.org/princess.shtml)
|)
(set-info :status sat)
(declare-fun gcd0 (Int Int Int Int) Bool)
(declare-fun gcd1 (Int Int Int Int Int) Bool)
(declare-fun gcd10 (Int Int Int Int) Bool)
(declare-fun gcd11 (Int Int Int Int) Bool)
(declare-fun gcd3 (Int Int Int Int) Bool)
(declare-fun gcd4 (Int Int Int Int) Bool)
(declare-fun gcd5 (Int Int Int Int) Bool)
(declare-fun gcd6 (Int Int Int Int) Bool)
(declare-fun gcd7 (Int Int Int Int) Bool)
(declare-fun gcd8 (Int Int Int Int) Bool)
(declare-fun gcd9 (Int Int Int Int) Bool)
(declare-fun gcd_post (Int Int Int) Bool)
(declare-fun gcd_pre (Int Int) Bool)
(declare-fun inv_main10 (Int Int) Bool)
(declare-fun inv_main14 (Int Int Int) Bool)
(declare-fun inv_main2 () Bool)
(assert inv_main2)
(assert (forall ((var0 Int) (var1 Int) (var2 Int)) (or (not (and (and (inv_main10 var2 var1) (gcd_post var2 var1 var0)) (and (and (<= 0 (+ (+ 1 (* (- 1) var0)) (- 1))) (<= 0 (+ var2 (- 1)))) (<= 0 (+ var1 (- 1)))))) (inv_main14 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (and inv_main2 (and (and (not (<= 0 (* (- 1) var1))) (not (<= 0 (+ (+ var1 (- 2147483647)) (- 1))))) (and (not (<= 0 (* (- 1) var0))) (not (<= 0 (+ (+ var0 (- 2147483647)) (- 1)))))))) (inv_main10 var0 var1))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (inv_main10 var1 var0)) (gcd_pre var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int)) (not (inv_main14 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int)) (or (not (gcd_pre var1 var0)) (gcd0 var1 var0 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (gcd0 var3 var2 var1 var0) (or (<= 0 (* (- 1) var3)) (<= 0 (* (- 1) var2))))) (gcd4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (gcd0 var3 var2 var1 var0) (and (not (<= 0 (* (- 1) var3))) (not (<= 0 (* (- 1) var2)))))) (gcd5 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (gcd4 var3 var2 var1 var0)) (gcd1 var3 var2 var1 var0 0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (gcd5 var3 var2 var1 var0)) (gcd3 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (gcd3 var3 var2 var1 var0) (= var3 var2))) (gcd7 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (gcd3 var3 var2 var1 var0) (not (= var3 var2)))) (gcd8 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (gcd7 var3 var2 var1 var0)) (gcd1 var3 var2 var1 var0 var3))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (gcd8 var3 var2 var1 var0)) (gcd6 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (gcd6 var3 var2 var1 var0) (<= 0 (+ (+ var3 (* (- 1) var2)) (- 1))))) (gcd10 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (and (gcd6 var3 var2 var1 var0) (not (<= 0 (+ (+ var3 (* (- 1) var2)) (- 1)))))) (gcd11 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int)) (or (not (and (gcd10 var4 var3 var2 var1) (gcd_post (+ var4 (* (- 1) var3)) var3 var0))) (gcd1 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (gcd11 var3 var2 var1 var0)) (gcd9 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int)) (or (not (and (gcd9 var4 var3 var2 var1) (gcd_post var4 (+ var3 (* (- 1) var4)) var0))) (gcd1 var4 var3 var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int) (var4 Int)) (or (not (gcd1 var4 var3 var2 var1 var0)) (gcd_post var2 var1 var0))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (gcd10 var3 var2 var1 var0)) (gcd_pre (+ var3 (* (- 1) var2)) var2))))
(assert (forall ((var0 Int) (var1 Int) (var2 Int) (var3 Int)) (or (not (gcd9 var3 var2 var1 var0)) (gcd_pre var3 (+ var2 (* (- 1) var3))))))
(check-sat)
